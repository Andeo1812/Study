==10221== Memcheck, a memory error detector
==10221== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10221== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==10221== Command: ./task
==10221== Parent PID: 6227
==10221== 
==10221== Invalid read of size 8
==10221==    at 0x10DAE5: BinaryTreeHuffman<unsigned char>::BinaryTreeHuffman(std::priority_queue<NodeABS<unsigned char>*, std::vector<NodeABS<unsigned char>*, std::allocator<NodeABS<unsigned char>*> >, FuncCompare::{lambda(NodeABS<unsigned char>*, NodeABS<unsigned char>*)#1}>) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10C2EC: void CustomEncode<std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >&, std::vector<unsigned char, std::allocator<unsigned char> >&) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10B0CB: run(std::istream&, std::ostream&) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10B183: main (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==10221== 
==10221== 
==10221== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==10221==  Access not within mapped region at address 0x0
==10221==    at 0x10DAE5: BinaryTreeHuffman<unsigned char>::BinaryTreeHuffman(std::priority_queue<NodeABS<unsigned char>*, std::vector<NodeABS<unsigned char>*, std::allocator<NodeABS<unsigned char>*> >, FuncCompare::{lambda(NodeABS<unsigned char>*, NodeABS<unsigned char>*)#1}>) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10C2EC: void CustomEncode<std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> > >(std::vector<unsigned char, std::allocator<unsigned char> >&, std::vector<unsigned char, std::allocator<unsigned char> >&) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10B0CB: run(std::istream&, std::ostream&) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10B183: main (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==  If you believe this happened as a result of a stack
==10221==  overflow in your program's main thread (unlikely but
==10221==  possible), you can try to increase the size of the
==10221==  main thread stack using the --main-stacksize= flag.
==10221==  The main thread stack size used in this run was 8388608.
==10221== 
==10221== HEAP SUMMARY:
==10221==     in use at exit: 73,728 bytes in 2 blocks
==10221==   total heap usage: 2 allocs, 0 frees, 73,728 bytes allocated
==10221== 
==10221== 1,024 bytes in 1 blocks are still reachable in loss record 1 of 2
==10221==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10221==    by 0x4C1F470: _IO_file_doallocate (in /usr/lib/libc.so.6)
==10221==    by 0x4C2D23F: _IO_doallocbuf (in /usr/lib/libc.so.6)
==10221==    by 0x4C2C35C: _IO_file_underflow@@GLIBC_2.2.5 (in /usr/lib/libc.so.6)
==10221==    by 0x4C2D2F5: _IO_default_uflow (in /usr/lib/libc.so.6)
==10221==    by 0x4988FA1: syncgetc (stdio_sync_filebuf.h:224)
==10221==    by 0x4988FA1: __gnu_cxx::stdio_sync_filebuf<char, std::char_traits<char> >::underflow() (stdio_sync_filebuf.h:132)
==10221==    by 0x49979DE: sgetc (streambuf:349)
==10221==    by 0x49979DE: sgetc (streambuf:343)
==10221==    by 0x49979DE: std::istream::sentry::sentry(std::istream&, bool) (istream.tcc:59)
==10221==    by 0x4999580: std::basic_istream<char, std::char_traits<char> >& std::operator>><char, std::char_traits<char> >(std::basic_istream<char, std::char_traits<char> >&, char&) (istream.tcc:963)
==10221==    by 0x10B093: run(std::istream&, std::ostream&) (in /home/andeo/GitHub/Study_C_CPP/task)
==10221==    by 0x10B183: main (in /home/andeo/GitHub/Study_C_CPP/task)
==10221== 
==10221== 72,704 bytes in 1 blocks are still reachable in loss record 2 of 2
==10221==    at 0x4845899: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10221==    by 0x491F15A: pool (eh_alloc.cc:123)
==10221==    by 0x491F15A: __static_initialization_and_destruction_0 (eh_alloc.cc:262)
==10221==    by 0x491F15A: _GLOBAL__sub_I_eh_alloc.cc (eh_alloc.cc:338)
==10221==    by 0x4005EDD: call_init (in /usr/lib/ld-linux-x86-64.so.2)
==10221==    by 0x4005FCB: _dl_init (in /usr/lib/ld-linux-x86-64.so.2)
==10221==    by 0x401D969: ??? (in /usr/lib/ld-linux-x86-64.so.2)
==10221== 
==10221== LEAK SUMMARY:
==10221==    definitely lost: 0 bytes in 0 blocks
==10221==    indirectly lost: 0 bytes in 0 blocks
==10221==      possibly lost: 0 bytes in 0 blocks
==10221==    still reachable: 73,728 bytes in 2 blocks
==10221==         suppressed: 0 bytes in 0 blocks
==10221== 
==10221== For lists of detected and suppressed errors, rerun with: -s
==10221== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
